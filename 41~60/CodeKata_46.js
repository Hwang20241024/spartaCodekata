//// 로또의 최고 순위와 최저 순위

/*
로또 6/45(이하 '로또'로 표기)는 1부터 45까지의 
숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 
아래는 로또의 순위를 정하는 방식입니다. 

순위	당첨 내용
1	    6개 번호가 모두 일치
2	    5개 번호가 일치
3	    4개 번호가 일치
4	    3개 번호가 일치
5	    2개 번호가 일치
6(낙첨)	그 외

로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다.
하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 
당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 
최고 순위와 최저 순위를 알아보고 싶어 졌습니다.
알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 
로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 
당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 

최고 순위와 최저 순위의 한 예는 아래와 같습니다.

당첨 번호	    31	10	    45	1	6	    19	결과
최고 순위 번호	31	0→10	44	1	0→6	    25	4개 번호 일치, 3등
최저 순위 번호	31	0→11	44	1	0→7	    25

- 순서와 상관없이, 구매한 로또에 당첨 번호와 
일치하는 번호가 있으면 맞힌 걸로 인정됩니다.

- 알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 
3등에 당첨될 수 있습니다.

-- 3등을 만드는 다른 방법들도 존재합니다. 
하지만, 2등 이상으로 만드는 것은 불가능합니다.

- 알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 
5등에 당첨될 수 있습니다.

-- 5등을 만드는 다른 방법들도 존재합니다. 
하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.

민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 
win_nums가 매개변수로 주어집니다. 
이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 
return 하도록 solution 함수를 완성해주세요.

lottos	                win_nums	                result
[44, 1, 0, 0, 31, 25]	[31, 10, 45, 1, 6, 19]	    [3, 5]
[0, 0, 0, 0, 0, 0]	    [38, 19, 20, 40, 15, 25]	[1, 6]
[45, 4, 35, 20, 3, 9]	[20, 9, 3, 45, 4, 35]	    [1, 1]


*/

// 1. 최고순위랑 최저순위가 있어야한다
// 1-1. 만약에 가려지지 않는 숫자가 당첨번호랑 겹치지 않는다면  [5, 6]
// (최대 두개 겹치고, 아예 안겹칠수 있으니)
// 1-2. 만약에 가려지지 않는 숫자가 당첨번호랑 겹친다면? [4,5]
// (가려진게 다 겹친다해도 2  기존 + 1 해서 4등이다 만약 가려진게 1이여도 5등)

// 2. 어차피 가려진 부분은 무조건 최고, 최저 순위 떄문에 1개 혹은 2개가 겹침.
// 2-1. 그러므로 가려진 부분을 제외하고 번호 있는부분만 검사하자.
// 2-2. 나중에 1~2개 더해서 순위 정하면 되니깐
// 2-3. 가려진 부분이 없다면 그냥 검사만

// 3. 일단 최우선 0이있는지 없는지 확인하는데 없다면?
// 3-1. 없으면 두개의 배열의 합집합 해서 길이를 재본다 .

// 4. 0이 존재 한다면
// 4-1. 배열에서 filter를써서 0 이 몇개인지 샌다.
// 4-2. 배열에서 0을 제외한다.
// 4-3. 배열의 합집합 해서 길이를 재본다 .

function solution(lottos, win_nums) {
  // 순위 계산 함수
  const getRank = (count) => (count > 1 ? 7 - count : 6); // 1개 이하 맞추면 6등

  // 0의 개수 (알 수 없는 번호)
  const zeroCount = lottos.filter(value => value === 0).length;

  // 당첨 번호와 일치하는 개수
  const matchCount = lottos.filter(value => win_nums.includes(value)).length;

  // 최고 순위: 일치한 개수 + 0의 개수
  const maxRank = getRank(matchCount + zeroCount);

  // 최저 순위: 일치한 개수만
  const minRank = getRank(matchCount);

  return [maxRank, minRank];
}